##시퀀스 자료형
"""
* 문자열 : 
      * 시퀀스형에서 사용할수 있는 메소드(count(), index(), split() 등...)
      * 슬라이싱([:][::])
      * 요소들로 이루어져 가능했던 기능들 (요소 합치기, 요소 찾기 등등)

* list :      
* tuple :
      * 리스트처럼 요소를 일렬로 저장하지만 안에 저장된 요소를 변경, 추가, 삭제할 수 없다.
      * 값을 추가, 삭제, 변경할 수 없기 때문에, 사용하지 못하는 메소드가 많다.
      * tuple의 생성 방법은 tuple = 값, 값 또는 tuple = (값, 값)    
*dict(딕셔너리)
      * list, tuple, str, range(범위안에 연속된 데이터를 만드는 시퀸스였습니다.)
      * 공통적인 특징이 있어요 데이터의 연관성이 없습니다.
      * dict는 여러개의 값이 일렬로 정렬되면서도 값끼리의 연관성이 존재
      (예시 : 게임 케릭터 힘:30, 지능:20, 체력:40, 민첩:90) 
      * dict 생성방법은 중괄호  
*set
     *set은 수학의 집학을 의미합니다.
     *딕셔너리와 같이 순서가 없습니다.
     *값의 중복4을 허락하지 않습니다. 아주 중요합니다.
     *set 생성 방법도 중괄호          
"""

튜플 = (1, "이", 3.0)
print(type(튜플))
print(튜플)

수강생 = "중꺾그마"

수강생_list = list(수강생)
수강생_tuple = tuple(수강생)

print(수강생_list)
print(수강생_tuple)

#join함수 공부 알고 있으면 코테에 좋음
취뽀_수강생 = "/".join(수강생_list)
print(취뽀_수강생)

#튜플은 인덱싱이 가능하다
print(튜플[2])
print(튜플.index(3.0))

#튜플을 쓰는 이유
"""
여러명이 코딩을 하는 경우 변경되면 안되는 변수를 건드리는 경우
또는 값이 변경되면 안되는 중요한 데이터를 넣어서 보안적으로 관리하기 좋음

and

list는 튜플보다 무겁다

파이썬은 동적배열을 지원합니다.
- list = [1,2,3,4] 생성해서 4개에 값을 모두 넣고 다시 추가하는경우
메모리 크기를 더블링 해서 생성합니다
"""

# dict{}

짱짱맨 = {"힘":30, "지능":20, "체력":40,"민첩":90}
print(짱짱맨)

print(짱짱맨["지능"])

딕셔너리3 = dict(힘=30, 지능=20, 체력=40, 민첩=50)
print(딕셔너리3)

딕셔너리4 = dict(zip(["힘", "지능", "체력", "민첩"], [30,20,40,40]))
print(딕셔너리4)

## 값의 중복은 허락되는데, 키의 중복은 허락하지 않습니다.
print(짱짱맨.keys())
print(짱짱맨.values())

리스트화된_짱짱맨 = list(짱짱맨.items())
print(리스트화된_짱짱맨[0][1])

짱짱맨["힘"] = 10
print(짱짱맨)

짱짱맨.update({"손재주" : 44, "매력": 100})
print(짱짱맨)

